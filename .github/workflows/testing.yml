# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Testing Yari

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: technote-space/get-diff-action@v3
        id: git_diff_kumascript
        with:
          PREFIX_FILTER: |
            kumascript/

      - name: Display Git diffs
        run: echo ${{ steps.git_diff_kumascript.outputs.diff }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "12"
      - name: Display Node & Yarn version
        run: |
          node --version
          yarn --version

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2.1.2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install all yarn packages
        run: |
          ./testing/scripts/yarn-install.sh
          ./testing/scripts/yarn-lockfile-check.sh

      - name: Lint checking
        run: ./testing/scripts/lint-check.sh

      - name: Unit testing client
        run: yarn test:client

      - name: Unit testing kumascript
        if: steps.git_diff_kumascript.outputs.diff
        run: |
          export CONTENT_ROOT=testing/content/files
          yarn test:kumascript

      - name: Functional testing
        run: |
          # Make this env var explicit for GitHub Actions because in local
          # dev/debug you're encouraged to start it yourself in a separate
          # terminal.
          export TESTING_START_SERVER=true

          # In terms of the --maxWorkers option, it's not yet clear which
          # is best.
          # See https://jestjs.io/docs/en/troubleshooting#tests-are-extremely-slow-on-docker-andor-continuous-integration-ci-server
          # and https://www.peterbe.com/plog/ideal-number-of-workers-in-jest-maxWorkers
          # CI tends to have fewer CPUs than laptops so let's stay conservative
          # for now.
          # Also note that `--runInBand` is the same as `--maxWorkers=1`

          ./testing/scripts/functional-test.sh --runInBand

  deployer:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: technote-space/get-diff-action@v3
        id: git_diff_content
        with:
          PREFIX_FILTER: deployer/

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Python poetry
        uses: dschep/install-poetry-action@v1.3

      - name: Install deployer
        run: |
          cd deployer
          poetry install

      - name: Display Python & Poetry version
        run: |
          python --version
          poetry --version

      - name: Lint Python code
        run: |
          flake8 deployer
          black --check deployer

      - name: Basic run of deployer
        run: |
          cd deployer
          poetry run deployer --help
