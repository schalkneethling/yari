name: Production Build

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 */24 * * *"

  workflow_dispatch:
    inputs:
      notes:
        description: "Notes"
        required: false
        default: ""
      archived_content:
        description: "Build archived content"
        required: false
        default: "false"
      translated_content:
        description: "Build translated content"
        required: false
        default: "false"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: mdn/content
          path: mdn/content

      # XXX WORK IN PROGRESS
      # - uses: actions/checkout@v2
      #   if: ${{ github.event.inputs.archived_content }} == "true"
      #   with:
      #     repository: mdn/archived-content
      #     path: mdn/archived-content
      # - uses: actions/checkout@v2
      #   if: ${{ github.event.inputs.translated_content }} == "true"
      #   with:
      #     repository: mdn/translated-content
      #     path: mdn/translated-content

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "12"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2.1.1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install all yarn packages
        run: yarn --frozen-lockfile

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Python poetry
        uses: dschep/install-poetry-action@v1.3

      - name: Install deployer
        run: |
          cd deployer
          poetry install

      - name: Display Python & Poetry version
        run: |
          python --version
          poetry --version

      - name: Print information about build
        run: |
          echo "Trigger notes: ${{ github.event.inputs.notes }}"
          echo "Trigger archived-content: ${{ github.event.inputs.archived_content }}"
          echo "Trigger translated-content: ${{ github.event.inputs.translated_content }}"

      - name: Build everything
        run: |
          # Remember, the mdn/content repo got cloned into `pwd` into a
          # sub-folder called "mdn/content"
          export CONTENT_ROOT=$(pwd)/mdn/content/files
          echo "CONTENT_ROOT=$CONTENT_ROOT"

          # TODO:
          # The building of archived and translated content depends
          # on ${{ github.event.inputs.archived_content }} and
          # ${{ github.event.inputs.translated_content }}
          # And we might consider leveraging that here to set the appropriate
          # env vars so they get built too.
          # Another interesting option is to only build them sometimes.
          # For example, every 1st of the month or every 1st day of the week.
          # Sample pseudo-code:
          #
          #    day_of_month=$(date +"%d")
          #    if [ $day_of_month -eq "1" ]; then
          #      echo "Going to build with the archive content too"
          #      export CONTENT_ARCHIVED_ROOT=archived-content/files
          #    fi
          #
          # ALTERNATIVELY...
          # We can use Actions Inputs and make it a manual trigger.
          #
          #   if [ ${{ github.event.inputs.archived_content }} -eq "true" ]; then
          #      echo "Going to build with the archive content too"
          #      export CONTENT_ARCHIVED_ROOT=archived-content/files
          #    fi
          #
          # Or, we use a combination of both where we build archive content
          # either on the 1st of every month OR if it's manually triggered.

          # The default for this environment variable is geared for writers
          # (aka. local development). Usually defaults are supposed to be for
          # secure production but this is an exception and default
          # is not insecure.
          export BUILD_LIVE_SAMPLES_BASE_URL=https://mdn.mozillademos.org

          # TODO: Only relevant once github.com/mdn/mdn-content is a thing.
          # export CONTENT_ROOT=mdn-content/content/files

          # Now is not the time to worry about flaws.
          export BUILD_FLAW_LEVELS="*:ignore"
          yarn prepare-build

          # Uncomment when hacking on this workflow. It means the `yarn build`
          # finishes much sooner, which can be helpful debugging the other stuff
          # the workflow needs to do.
          # export BUILD_FOLDERSEARCH=web/html

          yarn build

          # TODO: When the deployer is available this is where we
          # would upload the whole content of client/build
          du -sh client/build

      - name: Deploy with deployer
        run: |
          # Set the CONTENT_ROOT first
          export CONTENT_ROOT=$(pwd)/mdn/content/files
          echo "CONTENT_ROOT=$CONTENT_ROOT"

          # XXX Set the CONTENT_TRANSLATED_ROOT and CONTENT_ARCHIVED_ROOT

          cd deployer
          export DEPLOYER_BUCKET_NAME=mdn-content-dev
          export DEPLOYER_BUCKET_PREFIX=main

          export AWS_ACCESS_KEY_ID=${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

          poetry run deployer upload --help
          poetry run deployer upload ../client/build
          poetry run deployer update-lambda-functions ./aws-lambda
